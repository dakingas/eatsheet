{"version":3,"sources":["components/app/index.tsx","serviceWorker.ts","index.tsx","components/app/logo.svg"],"names":["hipsterIpsum","react_default","a","createElement","pinkmanIpsum","samuelLIpsum","RoutingDemo","Fragment","NavLink","to","exact","className","activeClassName","Switch","Route","path","render","routeProps","App","BrowserRouter","basename","process","src","logo","alt","app_RoutingDemo","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","element","document","getElementById","ReactDOM","components_app","URL","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.1c72bbb6.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  NavLink\n} from \"react-router-dom\";\nimport logo from \"./logo.svg\";\nimport \"./index.css\";\n\nconst hipsterIpsum = (\n  <p>\n    Vape activated charcoal celiac gochujang, ugh master cleanse blue bottle fam\n    chia ennui lumbersexual. Brooklyn XOXO prism blog retro, coloring book\n    seitan knausgaard copper mug air plant chillwave try-hard hammock irony.\n    Trust fund lomo PBR&B next level cred listicle austin migas semiotics vape\n    echo park. Meggings echo park pork belly gastropub etsy vice blog next level\n    tousled chartreuse. 8-bit venmo stumptown butcher schlitz vice. Microdosing\n    bespoke brooklyn mlkshk, ramps before they sold out +1 everyday carry\n    narwhal umami post-ironic.\n  </p>\n);\n\nconst pinkmanIpsum = (\n  <p>\n    What business? The business you put me on, asshole! What, you already\n    forgot? THIS business. Huh? That uh jog your memory, son of a bitch? Hey,\n    you said... you said handle it, so you know what, I handled it. Didn't mean\n    to kill somebody? Well, too late you know cause, dude's dead. Way dead. Oh,\n    and hey, hey. Here's your money. Yeah, forty-six hundred and sixty bucks.\n    Your half. Spend it in good health, you miserable son of bitch.\n  </p>\n);\n\nconst samuelLIpsum = (\n  <p>\n    The path of the righteous man is beset on all sides by the iniquities of the\n    selfish and the tyranny of evil men. Blessed is he who, in the name of\n    charity and good will, shepherds the weak through the valley of darkness,\n    for he is truly his brother's keeper and the finder of lost children. And I\n    will strike down upon thee with great vengeance and furious anger those who\n    would attempt to poison and destroy My brothers. And you will know My name\n    is the Lord when I lay My vengeance upon thee.\n  </p>\n);\n\nconst RoutingDemo: React.SFC = () => (\n  <>\n    <ul>\n      <li>\n        <NavLink\n          to=\"/\"\n          exact\n          className=\"App-NavLink\"\n          activeClassName=\"App-NavLink-selected\"\n        >\n          Main\n        </NavLink>\n      </li>\n      <li>\n        <NavLink\n          to=\"/about\"\n          className=\"App-NavLink\"\n          activeClassName=\"App-NavLink-selected\"\n        >\n          About\n        </NavLink>\n      </li>\n      <li>\n        <NavLink\n          to=\"/contact-us\"\n          className=\"App-NavLink\"\n          activeClassName=\"App-NavLink-selected\"\n        >\n          Contact us\n        </NavLink>\n      </li>\n    </ul>\n    <Switch>\n      <Route path=\"/\" exact render={routeProps => hipsterIpsum} />\n      <Route path=\"/about\" render={routeProps => pinkmanIpsum} />\n      <Route path=\"/contact-us\" render={routeProps => samuelLIpsum} />\n    </Switch>\n  </>\n);\n\nconst App: React.SFC = () => (\n  <Router basename={process.env.REACT_APP_PUBLIC_URL || undefined}>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <RoutingDemo />\n      </header>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst element = document.getElementById(\"root\");\nReactDOM.render(<App />, element);\n\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register({\n  onSuccess(serviceWorkerRegistration) {\n    // TODO: Warn about service worker installation and offline use\n  },\n  onUpdate(serviceWorkerRegistration) {\n    // TODO: Warn about new content received\n  }\n});\n\n// Hot reload enabled\ndeclare var module: {\n  hot: {\n    accept(path?: string, callback?: () => void): void;\n  };\n};\nif (module.hot) {\n  module.hot.accept(\"./components/app\", () => {\n    const NextApp = require(\"./components/app\").default;\n    ReactDOM.render(<NextApp />, element);\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}